{
  "version": 3,
  "sources": ["../../../../tfjs-backend-webgl/src/base.ts", "../../../../tfjs-backend-webgl/src/flags_webgl.ts", "../../../../tfjs-backend-webgl/src/webgl_util.ts", "../../../../tfjs-backend-webgl/src/canvas_util.ts", "../../../../tfjs-backend-webgl/src/tex_util.ts", "../../../../tfjs-backend-webgl/src/backend_webgl.ts", "../../../../tfjs-backend-webgl/src/glsl_version.ts", "../../../../tfjs-backend-webgl/src/gpgpu_math.ts", "../../../../tfjs-backend-webgl/src/shader_compiler.ts", "../../../../tfjs-backend-webgl/src/shader_compiler_util.ts", "../../../../tfjs-backend-webgl/src/decode_matrix_gpu.ts", "../../../../tfjs-backend-webgl/src/decode_matrix_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/encode_float_gpu.ts", "../../../../tfjs-backend-webgl/src/encode_float_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/encode_matrix_gpu.ts", "../../../../tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/gpgpu_context.ts", "../../../../tfjs-backend-webgl/src/gpgpu_util.ts", "../../../../tfjs-backend-cpu/src/shared.ts", "../../../../tfjs-backend-cpu/src/kernels/Abs.ts", "../../../../tfjs-backend-cpu/src/cpu_util.ts", "../../../../tfjs-backend-cpu/src/kernels/Add.ts", "../../../../tfjs-backend-cpu/src/utils/binary_impl.ts", "../../../../tfjs-backend-cpu/src/utils/binary_utils.ts", "../../../../tfjs-backend-cpu/src/kernels/Cast.ts", "../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Complex.ts", "../../../../tfjs-backend-cpu/src/kernels/Identity.ts", "../../../../tfjs-backend-cpu/src/kernels/Real.ts", "../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/BitwiseAnd.ts", "../../../../tfjs-backend-cpu/src/kernels/Ceil.ts", "../../../../tfjs-backend-cpu/src/utils/unary_impl.ts", "../../../../tfjs-backend-cpu/src/utils/unary_utils.ts", "../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Equal.ts", "../../../../tfjs-backend-cpu/src/kernels/Exp.ts", "../../../../tfjs-backend-cpu/src/kernels/Expm1.ts", "../../../../tfjs-backend-cpu/src/kernels/Floor.ts", "../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts", "../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts", "../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Greater.ts", "../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts", "../../../../tfjs-backend-cpu/src/kernels/Less.ts", "../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts", "../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Log.ts", "../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Maximum.ts", "../../../../tfjs-backend-cpu/src/kernels/Minimum.ts", "../../../../tfjs-backend-cpu/src/kernels/Multiply.ts", "../../../../tfjs-backend-cpu/src/kernels/Neg.ts", "../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts", "../../../../tfjs-backend-cpu/src/kernels/Prod.ts", "../../../../tfjs-backend-cpu/src/kernels/Transpose.ts", "../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts", "../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts", "../../../../tfjs-backend-cpu/src/kernels/Slice.ts", "../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts", "../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts", "../../../../tfjs-backend-cpu/src/kernels/StaticRegexReplace.ts", "../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Sub.ts", "../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts", "../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts", "../../../../tfjs-backend-webgl/src/kernel_utils/shared.ts", "../../../../tfjs-backend-webgl/src/packing_util.ts", "../../../../tfjs-backend-webgl/src/pack_gpu.ts", "../../../../tfjs-backend-webgl/src/reshape_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/texture_manager.ts", "../../../../tfjs-backend-webgl/src/unaryop_gpu.ts", "../../../../tfjs-backend-webgl/src/unaryop_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/unpack_gpu.ts", "../../../../tfjs-backend-webgl/src/version.ts", "../../../../tfjs-backend-webgl/src/webgl.ts", "../../../../tfjs-backend-webgl/src/register_all_kernels.ts", "../../../../tfjs-backend-webgl/src/kernels/_FusedMatMul.ts", "../../../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts", "../../../../tfjs-backend-webgl/src/kernel_utils/kernel_funcs_utils.ts", "../../../../tfjs-backend-webgl/src/binaryop_gpu.ts", "../../../../tfjs-backend-webgl/src/binaryop_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Complex.ts", "../../../../tfjs-backend-webgl/src/kernels/Identity.ts", "../../../../tfjs-backend-webgl/src/kernels/LeakyRelu.ts", "../../../../tfjs-backend-webgl/src/kernels/Prelu.ts", "../../../../tfjs-backend-webgl/src/mulmat_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Multiply.ts", "../../../../tfjs-backend-webgl/src/binaryop_complex_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Reshape.ts", "../../../../tfjs-backend-webgl/src/kernel_utils/reshape.ts", "../../../../tfjs-backend-webgl/src/kernels/Sum.ts", "../../../../tfjs-backend-webgl/src/kernels/Sum_impl.ts", "../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts", "../../../../tfjs-backend-webgl/src/mean_gpu.ts", "../../../../tfjs-backend-webgl/src/reduce_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Transpose_impl.ts", "../../../../tfjs-backend-webgl/src/transpose_gpu.ts", "../../../../tfjs-backend-webgl/src/transpose_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Transpose.ts", "../../../../tfjs-backend-webgl/src/kernels/Abs.ts", "../../../../tfjs-backend-webgl/src/kernels/Acos.ts", "../../../../tfjs-backend-webgl/src/kernels/Acosh.ts", "../../../../tfjs-backend-webgl/src/kernels/Add.ts", "../../../../tfjs-backend-webgl/src/kernels/AddN.ts", "../../../../tfjs-backend-webgl/src/addn_gpu.ts", "../../../../tfjs-backend-webgl/src/addn_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/All.ts", "../../../../tfjs-backend-webgl/src/kernels/Any.ts", "../../../../tfjs-backend-webgl/src/kernels/ArgMax.ts", "../../../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts", "../../../../tfjs-backend-webgl/src/argminmax_gpu.ts", "../../../../tfjs-backend-webgl/src/argminmax_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/ArgMin.ts", "../../../../tfjs-backend-webgl/src/kernels/Asin.ts", "../../../../tfjs-backend-webgl/src/kernels/Asinh.ts", "../../../../tfjs-backend-webgl/src/kernels/Atan.ts", "../../../../tfjs-backend-webgl/src/kernels/Atan2.ts", "../../../../tfjs-backend-webgl/src/kernels/Atanh.ts", "../../../../tfjs-backend-webgl/src/kernels/AvgPool.ts", "../../../../tfjs-backend-webgl/src/pool_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/AvgPool3D.ts", "../../../../tfjs-backend-webgl/src/kernels/AvgPool3DGrad.ts", "../../../../tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/AvgPoolGrad.ts", "../../../../tfjs-backend-webgl/src/kernels/BatchMatMul.ts", "../../../../tfjs-backend-webgl/src/kernels/BatchNorm.ts", "../../../../tfjs-backend-webgl/src/batchnorm_gpu.ts", "../../../../tfjs-backend-webgl/src/batchnorm_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts", "../../../../tfjs-backend-webgl/src/kernels/Slice.ts", "../../../../tfjs-backend-webgl/src/slice_gpu.ts", "../../../../tfjs-backend-webgl/src/slice_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Bincount.ts", "../../../../tfjs-backend-webgl/src/kernels/BitwiseAnd.ts", "../../../../tfjs-backend-webgl/src/kernels/BroadcastArgs.ts", "../../../../tfjs-backend-webgl/src/kernels/Cast.ts", "../../../../tfjs-backend-webgl/src/kernels/NotEqual.ts", "../../../../tfjs-backend-webgl/src/kernels/Real.ts", "../../../../tfjs-backend-webgl/src/kernel_utils/int.ts", "../../../../tfjs-backend-webgl/src/kernels/Ceil.ts", "../../../../tfjs-backend-webgl/src/kernels/ClipByValue.ts", "../../../../tfjs-backend-webgl/src/clip_gpu.ts", "../../../../tfjs-backend-webgl/src/clip_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/ComplexAbs.ts", "../../../../tfjs-backend-webgl/src/complex_abs_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Concat.ts", "../../../../tfjs-backend-webgl/src/kernels/Concat_impl.ts", "../../../../tfjs-backend-webgl/src/concat_gpu.ts", "../../../../tfjs-backend-webgl/src/concat_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Imag.ts", "../../../../tfjs-backend-webgl/src/kernels/Conv2D.ts", "../../../../tfjs-backend-webgl/src/conv_gpu.ts", "../../../../tfjs-backend-webgl/src/conv_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Conv2D_impl.ts", "../../../../tfjs-backend-webgl/src/im2col_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropFilter.ts", "../../../../tfjs-backend-webgl/src/conv_backprop_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropInput.ts", "../../../../tfjs-backend-webgl/src/conv_backprop_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Conv3D.ts", "../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropFilterV2.ts", "../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropInputV2.ts", "../../../../tfjs-backend-webgl/src/kernels/Cos.ts", "../../../../tfjs-backend-webgl/src/kernels/Cosh.ts", "../../../../tfjs-backend-webgl/src/kernels/CropAndResize.ts", "../../../../tfjs-backend-webgl/src/crop_and_resize_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Cumprod.ts", "../../../../tfjs-backend-webgl/src/cum_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Cum_impl.ts", "../../../../tfjs-backend-webgl/src/kernels/Cumsum.ts", "../../../../tfjs-backend-webgl/src/kernels/DenseBincount.ts", "../../../../tfjs-backend-webgl/src/kernels/DepthToSpace.ts", "../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts", "../../../../tfjs-backend-webgl/src/conv_gpu_depthwise.ts", "../../../../tfjs-backend-webgl/src/conv_packed_gpu_depthwise.ts", "../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts", "../../../../tfjs-backend-webgl/src/conv_backprop_gpu_depthwise.ts", "../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropInput.ts", "../../../../tfjs-backend-webgl/src/kernels/Diag.ts", "../../../../tfjs-backend-webgl/src/diag_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Dilation2D.ts", "../../../../tfjs-backend-webgl/src/dilation_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Einsum.ts", "../../../../tfjs-backend-webgl/src/kernels/Elu.ts", "../../../../tfjs-backend-webgl/src/kernels/EluGrad.ts", "../../../../tfjs-backend-webgl/src/kernels/Equal.ts", "../../../../tfjs-backend-webgl/src/kernels/Erf.ts", "../../../../tfjs-backend-webgl/src/kernels/Exp.ts", "../../../../tfjs-backend-webgl/src/kernels/ExpandDims.ts", "../../../../tfjs-backend-webgl/src/kernels/Expm1.ts", "../../../../tfjs-backend-webgl/src/kernels/FFT.ts", "../../../../tfjs-backend-webgl/src/kernels/FFT_impl.ts", "../../../../tfjs-backend-webgl/src/fft_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Fill.ts", "../../../../tfjs-backend-webgl/src/fill_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/FlipLeftRight.ts", "../../../../tfjs-backend-webgl/src/flip_left_right_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Floor.ts", "../../../../tfjs-backend-webgl/src/kernels/FloorDiv.ts", "../../../../tfjs-backend-webgl/src/kernels/FromPixels.ts", "../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts", "../../../../tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts", "../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts", "../../../../tfjs-backend-webgl/src/gather_nd_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts", "../../../../tfjs-backend-webgl/src/gather_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Greater.ts", "../../../../tfjs-backend-webgl/src/kernels/GreaterEqual.ts", "../../../../tfjs-backend-webgl/src/kernels/IFFT.ts", "../../../../tfjs-backend-webgl/src/kernels/IsFinite.ts", "../../../../tfjs-backend-webgl/src/kernels/IsInf.ts", "../../../../tfjs-backend-webgl/src/kernels/IsNaN.ts", "../../../../tfjs-backend-webgl/src/kernels/Less.ts", "../../../../tfjs-backend-webgl/src/kernels/LessEqual.ts", "../../../../tfjs-backend-webgl/src/kernels/LinSpace.ts", "../../../../tfjs-backend-webgl/src/kernels/Log.ts", "../../../../tfjs-backend-webgl/src/kernels/Log1p.ts", "../../../../tfjs-backend-webgl/src/kernels/LogicalAnd.ts", "../../../../tfjs-backend-webgl/src/kernels/LogicalNot.ts", "../../../../tfjs-backend-webgl/src/kernels/LogicalOr.ts", "../../../../tfjs-backend-webgl/src/kernels/LRN.ts", "../../../../tfjs-backend-webgl/src/lrn_gpu.ts", "../../../../tfjs-backend-webgl/src/lrn_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/LRNGrad.ts", "../../../../tfjs-backend-webgl/src/lrn_grad_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Max.ts", "../../../../tfjs-backend-webgl/src/kernels/Max_impl.ts", "../../../../tfjs-backend-webgl/src/kernels/Maximum.ts", "../../../../tfjs-backend-webgl/src/kernels/MaxPool.ts", "../../../../tfjs-backend-webgl/src/kernels/MaxPool3D.ts", "../../../../tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts", "../../../../tfjs-backend-webgl/src/max_pool_backprop_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts", "../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax.ts", "../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax_impl.ts", "../../../../tfjs-backend-webgl/src/kernels/Mean.ts", "../../../../tfjs-backend-webgl/src/kernels/Mean_impl.ts", "../../../../tfjs-backend-webgl/src/kernels/Min.ts", "../../../../tfjs-backend-webgl/src/kernels/Minimum.ts", "../../../../tfjs-backend-webgl/src/kernels/MirrorPad.ts", "../../../../tfjs-backend-webgl/src/mirror_pad_gpu.ts", "../../../../tfjs-backend-webgl/src/mirror_pad_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Mod.ts", "../../../../tfjs-backend-webgl/src/kernels/Multinomial.ts", "../../../../tfjs-backend-webgl/src/multinomial_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Softmax.ts", "../../../../tfjs-backend-webgl/src/kernels/RealDiv.ts", "../../../../tfjs-backend-webgl/src/kernels/Sub.ts", "../../../../tfjs-backend-webgl/src/kernels/Neg.ts", "../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts", "../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV4.ts", "../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV5.ts", "../../../../tfjs-backend-webgl/src/kernels/OneHot.ts", "../../../../tfjs-backend-webgl/src/onehot_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/OnesLike.ts", "../../../../tfjs-backend-webgl/src/kernels/ZerosLike.ts", "../../../../tfjs-backend-webgl/src/kernels/Pack.ts", "../../../../tfjs-backend-webgl/src/kernels/PadV2.ts", "../../../../tfjs-backend-webgl/src/pad_gpu.ts", "../../../../tfjs-backend-webgl/src/pad_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Pow.ts", "../../../../tfjs-backend-webgl/src/kernels/Prod.ts", "../../../../tfjs-backend-webgl/src/kernels/RaggedGather.ts", "../../../../tfjs-backend-webgl/src/kernels/RaggedRange.ts", "../../../../tfjs-backend-webgl/src/kernels/RaggedTensorToTensor.ts", "../../../../tfjs-backend-webgl/src/kernels/Range.ts", "../../../../tfjs-backend-webgl/src/kernels/Reciprocal.ts", "../../../../tfjs-backend-webgl/src/kernels/Relu.ts", "../../../../tfjs-backend-webgl/src/kernels/Relu6.ts", "../../../../tfjs-backend-webgl/src/kernels/ResizeBilinear.ts", "../../../../tfjs-backend-webgl/src/resize_bilinear_gpu.ts", "../../../../tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/ResizeBilinearGrad.ts", "../../../../tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighbor.ts", "../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts", "../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighborGrad.ts", "../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Reverse.ts", "../../../../tfjs-backend-webgl/src/reverse_gpu.ts", "../../../../tfjs-backend-webgl/src/reverse_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/RotateWithOffset.ts", "../../../../tfjs-backend-webgl/src/rotate_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Round.ts", "../../../../tfjs-backend-webgl/src/kernels/Rsqrt.ts", "../../../../tfjs-backend-webgl/src/kernels/ScatterNd.ts", "../../../../tfjs-backend-webgl/src/scatter_gpu.ts", "../../../../tfjs-backend-webgl/src/scatter_packed_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/SearchSorted.ts", "../../../../tfjs-backend-webgl/src/search_sorted_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Select.ts", "../../../../tfjs-backend-webgl/src/select_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Selu.ts", "../../../../tfjs-backend-webgl/src/kernels/Sigmoid.ts", "../../../../tfjs-backend-webgl/src/kernels/Sign.ts", "../../../../tfjs-backend-webgl/src/kernels/Sin.ts", "../../../../tfjs-backend-webgl/src/kernels/Sinh.ts", "../../../../tfjs-backend-webgl/src/kernels/Softplus.ts", "../../../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts", "../../../../tfjs-backend-webgl/src/kernels/SparseFillEmptyRows.ts", "../../../../tfjs-backend-webgl/src/kernels/SparseReshape.ts", "../../../../tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts", "../../../../tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts", "../../../../tfjs-backend-webgl/src/kernels/SparseToDense.ts", "../../../../tfjs-backend-webgl/src/kernels/SplitV.ts", "../../../../tfjs-backend-webgl/src/kernels/Sqrt.ts", "../../../../tfjs-backend-webgl/src/kernels/Square.ts", "../../../../tfjs-backend-webgl/src/kernels/SquaredDifference.ts", "../../../../tfjs-backend-webgl/src/kernels/StaticRegexReplace.ts", "../../../../tfjs-backend-webgl/src/kernels/Step.ts", "../../../../tfjs-backend-webgl/src/kernels/StridedSlice.ts", "../../../../tfjs-backend-webgl/src/strided_slice_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/StringNGrams.ts", "../../../../tfjs-backend-webgl/src/kernels/StringSplit.ts", "../../../../tfjs-backend-webgl/src/kernels/StringToHashBucketFast.ts", "../../../../tfjs-backend-webgl/src/kernels/Tan.ts", "../../../../tfjs-backend-webgl/src/kernels/Tanh.ts", "../../../../tfjs-backend-webgl/src/kernels/TensorScatterUpdate.ts", "../../../../tfjs-backend-webgl/src/kernels/Tile.ts", "../../../../tfjs-backend-webgl/src/tile_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/TopK.ts", "../../../../tfjs-backend-webgl/src/top_k_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Transform.ts", "../../../../tfjs-backend-webgl/src/transform_gpu.ts", "../../../../tfjs-backend-webgl/src/kernels/Unique.ts", "../../../../tfjs-backend-webgl/src/kernels/Unpack.ts", "../../../../tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts", "../../../../tfjs-backend-webgl/src/segment_gpu.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack conv2dTranspose op. */\nENV.registerFlag('WEBGL_PACK_CONV2DTRANSPOSE', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (!(typeof threshold === 'number')) {\n        throw new Error('WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but ' +\n            `got ${threshold}.`);\n      }\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (!(typeof threshold === 'number')) {\n        throw new Error('WEBGL_FLUSH_THRESHOLD must be a number but got ' +\n            `${threshold}.`);\n      }\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return fragmentShader;\n  }\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return;\n  }\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\n/// validateProgram is effectively \"If we `useProgram(program); drawArrays();`,\n/// give feedback in log about perf/correctness warnings or errors that would\n/// occur.\"\n/// So make sure we set up all vertex/texture/sampler/uniform data before\n/// calling validateProgram!\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  let maxSizeForNarrowTex =\n      env().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');\n  if (maxSizeForNarrowTex === Infinity &&\n      env().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {\n    maxSizeForNarrowTex = maxTexSize / 2;\n  }\n\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n    maxSizeForNarrowTex = maxSizeForNarrowTex * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  let textureShape: [number, number] = null;\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    textureShape = [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    textureShape = logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  }\n\n  // true if one edge length is 1 (1 or 2, if packed), while another edge\n  // length exceeds maxSizeForNarrowTex.\n  const isLongNarrowTex = textureShape != null &&\n      Math.max(...textureShape) > maxSizeForNarrowTex &&\n      Math.min(...textureShape) <= (isPacked ? 2 : 1) &&\n      Math.min(...textureShape) > 0;\n\n  if (textureShape == null || isLongNarrowTex) {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      textureShape =\n          util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    } else {\n      textureShape = util.sizeToSquarishShape(size);\n    }\n  }\n\n  return textureShape;\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1[shape1.length - 1];\n    const shape2Cols = shape2[shape2.length - 1];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  // Use canvas element for Safari, since its offscreen canvas does not support\n  // fencing.\n  if (!env().getBool('IS_SAFARI') && typeof OffscreenCanvas !== 'undefined' &&\n      webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n\n  if (webGLVersion === 1) {\n    return (\n        // tslint:disable-next-line\n        canvas.getContext('webgl', WEBGL_ATTRIBUTES) as WebGLRenderingContext ||\n        (canvas as HTMLCanvasElement)\n            .getContext('experimental-webgl',\n                        WEBGL_ATTRIBUTES) as WebGLRenderingContext);\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface Texture {\n  texture: WebGLTexture;\n  texShape: [number, number];\n}\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: Texture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util, WebGLData} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  override numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(\n      texture: WebGLTexture, shape: number[], dtype: DataType,\n      texHeight: number, texWidth: number, channels: string): DataId {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n\n    // Bind texture to the input tensor.\n    inData.texture = {texture, texShape: [texHeight, texWidth]};\n    inData.texShape = [texHeight, texWidth];\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program =\n        new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output =\n        this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n\n    return output.dataId;\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  override incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  override async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  override readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}):\n      GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  override timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  override time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  override memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as unknown as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().getNumber('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  override floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const binary of Object.values(this.binaryCache)) {\n      // TODO: Iterating through all binaries to build VAOs is supposed to be in\n      // a seperate function, like 'setVaos'. However, to avoid breaking changes\n      // for the users using parallel compile feature now, buildVao is silently\n      // added here.\n      this.gpgpu.buildVao(binary.webGLProgram);\n\n      const {\n        variablesLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.variablesLocations = variablesLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  override createTensorFromGPUData(\n      values: WebGLData, shape: number[], dtype: DataType): Tensor {\n    values.channels = values.channels || 'RGBA';\n    const {texture, height, width, channels} = values;\n    const backend = engine().backend as MathBackendWebGL;\n\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(\n          `The texture is invalid. Also, please make sure the texture and ` +\n          `the TFJS WebGL backend are using the same canvas. If you want to ` +\n          `use your own custom canvas, you have to create and use the custom ` +\n          `TFJS WebGL backend created from the canvas through ` +\n          `'new tf.MathBackendWebGL(customCanvas)'.`);\n    }\n\n    const dataId =\n        backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly. Since WebGL2 supports uint type and\n    // floatBitsToUinT built-in function, we could implment isnan following\n    // IEEE 754 rules.\n    // NaN defination in IEEE 754-1985 is :\n    //   - sign = either 0 or 1.\n    //   - biased exponent = all 1 bits.\n    //   - fraction = anything except all 0 bits (since all 0 bits represents\n    //   infinity).\n    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n    defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` :\n                                                              '';\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext, GPGPUContextProgram} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary extends GPGPUBinaryLocations {\n  webGLProgram: GPGPUContextProgram;\n  program: GPGPUProgram;\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n}\n\nexport interface GPGPUBinaryLocations {\n  customUniformLocations?: WebGLUniformLocation[];\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n  variablesLocations?: GPGPUVariableLocations[];\n}\n\nexport interface GPGPUVariableLocations {\n  name: string;\n  uniform: WebGLUniformLocation;\n  offset: WebGLUniformLocation;\n  shape?: WebGLUniformLocation;\n  texShape?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    gpgpu.buildVao(webGLProgram);\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      ...getUniformLocations(gpgpu, program, webGLProgram)\n    };\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      variablesLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\n\nexport function getUniformLocations(\n    gpgpu: GPGPUContext, program: GPGPUProgram,\n    webGLProgram: WebGLProgram): GPGPUBinaryLocations {\n  const variablesLocations: GPGPUVariableLocations[] = [];\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  let infLoc: WebGLUniformLocation = null;\n  let nanLoc: WebGLUniformLocation = null;\n\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (const varName of program.variableNames) {\n    const varLocs: GPGPUVariableLocations = {\n      name: varName,\n      uniform: gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow),\n      offset: gpgpu.getUniformLocation(\n          webGLProgram, `offset${varName}`, shouldThrow),\n    };\n    if (program.enableShapeUniforms) {\n      varLocs.shape = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      varLocs.texShape = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n\n    variablesLocations.push(varLocs);\n  }\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  if (program.customUniforms) {\n    for (const d of program.customUniforms) {\n      customUniformLocations.push(\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow));\n    }\n  }\n\n  return {\n    variablesLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n  gpgpu.bindVertexArray(binary.webGLProgram.vao);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  for (let i = 0; i < inputs.length; ++i) {\n    const input = inputs[i];\n    const {\n      uniform: varLoc,\n      offset: varOffsetLoc,\n      shape: varShapeLoc,\n      texShape: varTexShapeLoc,\n    } = binary.variablesLocations[i];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      continue;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      continue;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  }\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    for (let i = 0; i < binary.program.customUniforms.length; ++i) {\n      const d = binary.program.customUniforms[i];\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    }\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nconst CHANNEL_CHAR_TO_INDEX_MAP: Record<string, number> = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false,\n      usedChannels = 'RGBA') {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length;\n         usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject|WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao|null) => void;\n  deleteVertexArray: (vao: WebGLVao|null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl, () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl,\n            () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    const program2 = Object.assign(program, {vao: this.createVertexArray()});\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program2);\n    }\n    return program2;\n  }\n\n  public buildVao(program: GPGPUContextProgram) {\n    this.setProgram(program);\n    this.bindVertexArray(program.vao);\n    const gl = this.gl;\n    // Bind index buffer, and vertex buffers based on program attrib\n    // locations.\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n    gpgpu_util.bindVertexProgramAttributeStreams(\n        gl, program, this.vertexBuffer);\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(\n          boundVao === this.program.vao,\n          'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Shared functionality among backends.\nexport {simpleAbsImpl} from './kernels/Abs';\nexport {addImpl} from './kernels/Add';\nexport {bincountImpl, bincountReduceImpl} from './kernels/Bincount_impl';\nexport {bitwiseAndImpl} from './kernels/BitwiseAnd';\nexport {castImpl} from './kernels/Cast';\nexport {ceilImpl} from './kernels/Ceil';\nexport {concatImpl} from './kernels/Concat_impl';\nexport {equalImpl} from './kernels/Equal';\nexport {expImpl} from './kernels/Exp';\nexport {expm1Impl} from './kernels/Expm1';\nexport {floorImpl} from './kernels/Floor';\nexport {floorDivImpl} from './kernels/FloorDiv';\nexport {gatherNdImpl} from './kernels/GatherNd_Impl';\nexport {gatherV2Impl} from './kernels/GatherV2_impl';\nexport {greaterImpl} from './kernels/Greater';\nexport {greaterEqualImpl} from './kernels/GreaterEqual';\nexport {lessImpl} from './kernels/Less';\nexport {lessEqualImpl} from './kernels/LessEqual';\nexport {linSpaceImpl} from './kernels/LinSpace_impl';\nexport {logImpl} from './kernels/Log';\nexport {maxImpl} from './kernels/Max_impl';\nexport {maximumImpl} from './kernels/Maximum';\nexport {minimumImpl} from './kernels/Minimum';\nexport {multiplyImpl} from './kernels/Multiply';\nexport {negImpl} from './kernels/Neg';\nexport {notEqualImpl} from './kernels/NotEqual';\nexport {prodImpl} from './kernels/Prod';\nexport {raggedGatherImpl} from './kernels/RaggedGather_impl';\nexport {raggedRangeImpl} from './kernels/RaggedRange_impl';\nexport {raggedTensorToTensorImpl} from './kernels/RaggedTensorToTensor_impl';\nexport {rangeImpl} from './kernels/Range_impl';\nexport {rsqrtImpl} from './kernels/Rsqrt';\nexport {scatterImpl} from './kernels/Scatter_impl';\nexport {sigmoidImpl} from './kernels/Sigmoid';\nexport {sliceImpl} from './kernels/Slice';\nexport {sparseFillEmptyRowsImpl} from './kernels/SparseFillEmptyRows_impl';\nexport {sparseReshapeImpl} from './kernels/SparseReshape_impl';\nexport {sparseSegmentReductionImpl} from './kernels/SparseSegmentReduction_impl';\nexport {sqrtImpl} from './kernels/Sqrt';\nexport {squaredDifferenceImpl} from './kernels/SquaredDifference';\nexport {staticRegexReplaceImpl} from './kernels/StaticRegexReplace';\nexport {stridedSliceImpl} from './kernels/StridedSlice_impl';\nexport {stringNGramsImpl} from './kernels/StringNGrams_impl';\nexport {stringSplitImpl} from './kernels/StringSplit_impl';\nexport {stringToHashBucketFastImpl} from './kernels/StringToHashBucketFast_impl';\nexport {subImpl} from './kernels/Sub';\nexport {tileImpl} from './kernels/Tile_impl';\nexport {topKImpl} from './kernels/TopK_impl';\nexport {transposeImpl} from './kernels/Transpose_impl';\nexport {uniqueImpl} from './kernels/Unique_impl';\nexport {ComplexBinaryKernelImpl, SimpleBinaryKernelImpl} from './utils/binary_types';\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const bitwiseAndImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a & b));\n\nexport const bitwiseAnd = binaryKernelFunc(BitwiseAnd, bitwiseAndImpl);\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'cpu',\n  kernelFunc: bitwiseAnd\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl<I extends number | string = number,\n  O extends number | string = number>(op: SimpleUnaryOperation<I, O>):\n    SimpleUnaryImpl<I, O> {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataTypeFor, KernelFunc, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleUnaryImpl} from './unary_impl';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc<I extends number | string = number,\n  O extends number | string = number>(\n  name: string, op: SimpleUnaryOperation<I, O>,\n  dtype?: DataTypeFor<O>): KernelFunc {\n\n  const impl = createSimpleUnaryImpl<I, O>(op);\n\n  return unaryKernelFuncFromImpl<I, O>(name, impl, dtype);\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl<I extends number | string = number,\n  O extends number | string = number>(\n  name: string, unaryImpl: SimpleUnaryImpl<I, O>,\n  dtype?: DataTypeFor<O>): KernelFunc {\n\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values;\n    let decoded: ArrayLike<I>;\n    if (x.dtype === 'string') {\n      if (!Array.isArray(values)) {\n        throw new Error('String tensor\\'s value was not an instance of Array');\n      }\n      decoded = backend_util.fromUint8ToStringArray(values) as unknown as\n        ArrayLike<I>;\n    } else {\n      decoded = values as unknown as ArrayLike<I>;\n    }\n\n    const $dtype = dtype || x.dtype as DataTypeFor<O>;\n    const newValues = unaryImpl(decoded, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[],\n    defaultValue: TensorBuffer<R, D>|DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = (defaultValue instanceof TensorBuffer) ?\n      defaultValue :\n      buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, StaticRegexReplace, StaticRegexReplaceAttrs} from '@tensorflow/tfjs-core';\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const staticRegexReplaceImpl = createSimpleUnaryImpl<string,\n  string>((x: string, attrs) => {\n    const {pattern, replaceGlobal, rewrite} =\n      attrs as unknown as StaticRegexReplaceAttrs;\n    // TODO(mattSoulanille): Don't create a regex each time.\n    return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);\n});\n\nconst staticRegexReplace =\n  unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl);\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'cpu',\n  kernelFunc: staticRegexReplace,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map<string, number>();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n", "\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  bitwiseAndImpl: bitwiseAndImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  staticRegexReplaceImpl: staticRegexReplaceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  bitwiseAndImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  staticRegexReplaceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, Texture, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  // Number of bytes that have been allocated and available for reuse.\n  private _numBytesFree = 0;\n  private freeTextures: Record<string, Texture[]> = {};\n  private usedTextures: Record<string, Texture[]> = {};\n  private logEnabled = false;\n\n  constructor(private readonly gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): Texture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].pop();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: Texture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: Texture, shape: [number, number], logicalTexType: TextureUsage,\n      isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env()\n        .getNumber('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList && texList.indexOf(texture);\n    if (texIndex == null || texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList[texIndex] = texList[texList.length - 1];\n    texList.pop();\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    // TODO: Assign non-null value (empty object) to textures after disposed.\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n", "/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport {version};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {bitwiseAndConfig} from './kernels/BitwiseAnd';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {staticRegexReplaceConfig} from './kernels/StaticRegexReplace';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tensorScatterUpdateConfig} from './kernels/TensorScatterUpdate';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  bitwiseAndConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  staticRegexReplaceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tensorScatterUpdateConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType,\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET_PACKED = `\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as unknown as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `imod(rc.x, ${aShape[0]})`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `imod(rc.x, ${bShape[0]})`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${batchASnippet};\n        int batchB = ${batchBSnippet};\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n", "\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      // Use `max(count, 1.0)` instead of `count` in case count === 0.0.\n      // If count === 0.0, `avgValue` is always 0.0 and we change `count`'s\n      // value to avoid dividing zero.\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n", "\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, BitwiseAndInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {bitwiseAndImplCPU as cpuBitwiseAnd} from '../kernel_utils/shared';\n\nexport const BITWISEAND = `\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n`;\n\nexport const BITWISEAND_UNPACKED = `\n  return float(int(a.r) & int(b.r));\n`;\n\nexport function bitwiseAnd(args: {\n  inputs: BitwiseAndInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n  const versionNumber = env().getNumber('WEBGL_VERSION');\n\n  // The type of a and b are ensured to be `int32` in core, therefore no need to\n  // consider other type situations.\n  if ((backend.shouldExecuteOnCPU([a, b])) || versionNumber === 1) {\n    const aVals = backend.texData.get(a.dataId).values as TypedArray;\n    const bVals = backend.texData.get(b.dataId).values as TypedArray;\n    const [outValues, outShape] =\n        cpuBitwiseAnd(a.shape, b.shape, aVals, bVals, a.dtype);\n\n    const out = backend.makeTensorInfo(outShape, a.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (shouldUsePackedProgram) {\n    program = new BinaryOpPackedProgram(BITWISEAND, a.shape, b.shape, false);\n  } else {\n    program = new BinaryOpProgram(BITWISEAND_UNPACKED, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], a.dtype);\n}\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'webgl',\n  kernelFunc: bitwiseAnd as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.readSync(s0.dataId) as TypedArray;\n  const s1Vals = backend.readSync(s1.dataId) as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {castImplCPU} from '../kernel_utils/shared';\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.texData.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\nimport {CLONE, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  const shouldPack: boolean = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      $inputs[0].shape.length > 1;\n\n  if ($inputs.length === 1) {\n    // Clone tensor.\n    const program = shouldPack ?\n        new UnaryOpProgram(inputs[0].shape, CLONE) :\n        new UnaryOpPackedProgram(inputs[0].shape, CLONE);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if ($inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n    for (let i = 0; i < $inputs.length; i += maxTexturesInShader) {\n      const subArray = $inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (shouldPack) {\n    const program = new ConcatPackedProgram($inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, $inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D($inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n    const program = new Conv2DPackedProgram(convInfo);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    out =\n        backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n import {backend_util, util} from '@tensorflow/tfjs-core';\n\n import {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\n export class Conv2DPackedProgram implements GPGPUProgram {\n   variableNames = ['x', 'W'];\n   packedInputs = true;\n   packedOutput = true;\n   outputShape: number[];\n   userCode: string;\n   enableShapeUniforms: boolean;\n   customUniforms = [\n     {name: 'pads', type: 'ivec2' as const },\n     {name: 'strides', type: 'ivec2' as const },\n     {name: 'dilations', type: 'ivec2' as const },\n     {name: 'inDims', type: 'ivec2' as const },\n   ];\n\n   constructor(\n       convInfo: backend_util.Conv2DInfo, addBias = false,\n       activation: string = null, hasPreluActivation = false,\n       hasLeakyReluAlpha = false) {\n     this.outputShape = convInfo.outShape;\n     this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n     const padLeft = convInfo.padInfo.left;\n     const strideWidth = convInfo.strideWidth;\n     const dilationWidth = convInfo.dilationWidth;\n     const filterHeight = convInfo.filterHeight;\n     const filterWidth = convInfo.filterWidth;\n     const texelsAcross = filterWidth;\n\n     let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n     }\n\n     /**\n      * This vectorized implementation works by gathering the values needed for\n      * each output channel's dot product into vec4's and then multiplying them\n      * all together (this happens in the final double for-loop below). Most of\n      * the main loop consists of constructing these vec4's with the minimum\n      * number of texture2D calls, which means making use of all four returned\n      * values from a texture2D call at once.\n      */\n     mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n     }\n     mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n\n     for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n       const colIndex = texelC * 2;\n\n       mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n\n       if (strideWidth === 1) {\n         if (colIndex < filterWidth) {\n           // If padding is odd, the outer texels have to be composed.\n           if (padLeft % 2 === 1) {\n             // TODO: Ensure vec4 previous does not result in redundant sample,\n             // and avoid setting xTexelRC's that exceed the boundary in the\n             // first place rather than resetting them to vec4(0)).\n\n             // To compute xCOffset:\n             // - If padding is odd, we must add 1 to ensure we ask for an\n             // even-numbered row.\n             // - We subtract 2 to access the previous texel.\n\n             mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n             // This texel has been read in previous iteration if the dilation\n             // is 1.\n             if (dilationWidth === 1 && colIndex > 0) {\n               mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                   colIndex}.xy);\n                 `;\n             } else {\n               mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n             }\n           } else {\n             // Padding is even, so xRC corresponds to a single texel.\n             mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n           }\n\n           if (colIndex + 1 < filterWidth) {\n             // If dilation is even, the second entry should match the first\n             // (either both are composed or both are single samples). But if\n             // dilation is odd, then the second entry should be the opposite\n             // of the first (if the first is composed, the second is a single\n             // sample, and vice versa.)\n\n             const nextTexelOffset = padLeft % 2 === 0 ?\n                 util.nearestLargerEven(dilationWidth) :\n                 dilationWidth;\n\n             if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                 (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n               mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                   colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n\n               // If dilation > 1 then the xRC's will not be able to share any\n               // values, so each xRC will require two unique calls to getX.\n               if (dilationWidth > 1) {\n                 mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                        colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                        colIndex + 1}.xy);\n                     }\n                     `;\n               } else {\n                 mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                     colIndex + 1}.xy);\n                     `;\n               }\n\n             } else {\n               // If dilation is 1 and padding is odd, we have already read the\n               // texel when constructing the previous x value. Here we can\n               // simply skip the texture read.\n               if (nextTexelOffset === 1) {\n                 mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n               } else {\n                 mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                     colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n               }\n             }\n           }\n         }\n       } else {  // stride === 2\n         if (colIndex < filterWidth) {\n           // Depending on whether padLeft is even or odd, we want either the\n           // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n           // even, xC${colIndex +1} is simply the zw channels of texels we've\n           // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n           // need to come from the xy channels of a new texel, hence the `\n           // vec4\n           // final` initialized below.\n           if (padLeft % 2 === 1) {\n             mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                 colIndex + 1}.zw);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n             }\n           } else {\n             mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                   colIndex + 1}.zw);\n                 `;\n             }\n           }\n         }\n       }\n\n       // localize the dotProd accumulation within the loop, the theory is for\n       // GPU with limited cache, accumulate sum across large amount of\n       // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n       // 50 variables)\n       if (colIndex < filterWidth) {\n         mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n\n         if (colIndex + 1 < filterWidth) {\n           mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n         }\n       }\n     }\n     mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n\n     let activationSnippet = '', applyActivationSnippet = '';\n     if (activation) {\n       if (hasPreluActivation) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n       } else if (hasLeakyReluAlpha) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n       } else {\n         activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n       }\n\n       applyActivationSnippet = `result = activation(result);`;\n     }\n\n     const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n     if (addBias) {\n       this.variableNames.push('bias');\n     }\n\n     if (hasPreluActivation) {\n       this.variableNames.push('preluActivationWeights');\n     }\n     if (hasLeakyReluAlpha) {\n       this.variableNames.push('leakyreluAlpha');\n     }\n\n     this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n   }\n }\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\n// import {assertAndGetBroadcastShape} from\n// '../../../tfjs-core/src/ops/broadcast_util';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [convInfo.batchSize, numCols, convInfo.inChannels] :\n            [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    x.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col =\n      backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped =\n      reshape({inputs: {x: im2Col}, backend, attrs: {shape: x2ColShape}});\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      isChannelsLast ? im2ColReshaped.shape as [number, number, number] :\n                       w2Row.shape as [number, number, number],\n      isChannelsLast ? w2Row.shape as [number, number, number] :\n                       im2ColReshaped.shape as [number, number, number],\n      isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] :\n                       [convInfo.batchSize, convInfo.outChannels, numCols],\n      transposeA, transposeB, hasBias, fusedActivation,\n      hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] =\n      isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape(\n      {inputs: {x: product}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec4' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n        `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              ${isChannelsLast?\n             `float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);` :\n             `float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);`}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\nimport {Conv2DDerInputPackedProgram} from '../conv_backprop_packed_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  if (env().getBool('WEBGL_PACK_CONV2DTRANSPOSE') &&\n      $dataFormat === 'channelsLast') {\n    const customValues = [\n      [convInfo.strideHeight, convInfo.strideWidth],\n    ];\n    const program = new Conv2DDerInputPackedProgram(convInfo);\n    return backend.runWebGLProgram(\n        program, [dy, filter], 'float32', customValues);\n  } else {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n  }\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Conv2DDerInputPackedProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'strides', type: 'vec2' as const },\n  ];\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${convInfo.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${convInfo.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nconst COS_PACKED = `\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\n\nexport const cos =\n    unaryKernelFunc({opSnippet: COS, packedOpSnippet: COS_PACKED});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(args: {\n  inputs: CumprodInputs,\n  backend: MathBackendWebGL,\n  attrs: CumprodAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgl',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(\n      public op: CumOpType, public outputShape: number[], exclusive: boolean,\n      reverse: boolean) {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val =\n        exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType, CumProgram} from '../cum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: MathBackendWebGL, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                       colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                       colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 0.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\n\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n", "\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    const newWillReadFrequently =\n        env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n    if (fromPixels2DContext == null ||\n        newWillReadFrequently !== willReadFrequently) {\n      willReadFrequently = newWillReadFrequently;\n      fromPixels2DContext =\n          document.createElement('canvas').getContext(\n              '2d', {willReadFrequently});\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap, 0, 0,\n        width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  const prepareInputs = (): TensorInfo[] => {\n    const inputs: TensorInfo[] = [x, filter];\n\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat =\n        (input: TensorInfo, dataFormat: 'NHWC'|'NCHW'): TensorInfo => {\n          if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n              input.shape[0] !== 1) {\n            const alignedInput = reshape({\n              inputs: {x: input},\n              backend,\n              attrs: {shape: [input.shape[0], 1, 1]}\n            });\n            intermediates.push(alignedInput);\n            return alignedInput;\n          }\n          return input;\n        };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    return inputs;\n  };\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n      const fusedActivation =\n          activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new Conv2DPackedProgram(\n      convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n      hasLeakyreluAlpha);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], \n        params.shape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[],\n      private paramsShape: number[]) {\n    this.outputShape = shape;\n    const dtype = getCoordsDataType(shape.length);\n\n    let mainLoop = `\n    int index;`;\n    for (let j = 0; j < this.sliceDim; j++) {\n      mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n    }\n\n    this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as unknown as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\n\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedGatherImplCPU} from '../kernel_utils/shared';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits =\n      paramsNestedSplits.map(t => backend.readSync(t.dataId) as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.readSync(paramsDenseValues.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImplCPU(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedRangeImplCPU} from '../kernel_utils/shared';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.readSync(starts.dataId) as TypedArray;\n  const $limits = backend.readSync(limits.dataId) as TypedArray;\n  const $deltas = backend.readSync(deltas.dataId) as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedTensorToTensorImplCPU} from '../kernel_utils/shared';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.readSync(shape.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $defaultValue = backend.readSync(defaultValue.dataId) as TypedArray;\n  const $rowPartitionValues =\n      rowPartitionTensors.map(t => backend.readSync(t.dataId) as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImplCPU(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n        attrs as unknown as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {ScatterPackedProgram} from '../scatter_packed_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  let program;\n  if (env().getBool('WEBGL_PACK')) {\n    program = new ScatterPackedProgram(\n        numUpdates, sliceRank, flattenIndices.shape.length,\n        flattenX.shape.length, strides, flattenShape);\n  } else {\n    program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.shape.length,\n        flattenX.shape.length, strides, flattenShape);\n  }\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, float(found)));\n        }\n      `;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterPackedProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    const strideString2 = sliceDim > 1 ? 'strides[j + 1]' : 'strides';\n\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${updateSize}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${sliceDim}; j+=2) {\n              ivec4 index = round(${indicesSnippet});\n              flattenedIndex += index.xz * ${strideString};\n              if (j + 1 < ${sliceDim}) {\n                flattenedIndex += index.yw * ${strideString2};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${updatesSnippet};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, found));\n        }\n      `;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SearchSortedProgram} from '../search_sorted_gpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendWebGL,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program = new SearchSortedProgram(\n      sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n  const customValues = [[sortedSequence.shape[1]]];\n  return backend.runWebGLProgram(\n      program, [sortedSequence, values], 'int32', customValues);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgl',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class SearchSortedProgram implements GPGPUProgram {\n  variableNames = ['sortedSequence', 'values'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'numInputs', type: 'int' as UniformType}];\n\n  constructor(\n      batchSize: number, numInputs: number, numValues: number,\n      side: 'left'|'right') {\n    this.outputShape = [batchSize, numValues];\n\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${\n        Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n                                                              webGL1LoopHead;\n\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sigmoidImplCPU} from '../kernel_utils/shared';\n\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\n\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nconst SIN_PACKED = `\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\n\nexport const sin =\n    unaryKernelFunc({opSnippet: SIN, packedOpSnippet: SIN_PACKED});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sqrtImplCPU} from '../kernel_utils/shared';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc(\n    {opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, NamedAttrMap, StaticRegexReplace, StaticRegexReplaceAttrs, StaticRegexReplaceInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {staticRegexReplaceImplCPU} from '../kernel_utils/shared';\n\nexport function staticRegexReplace(args: {\n  inputs: StaticRegexReplaceInputs,\n  backend: MathBackendWebGL,\n  attrs: StaticRegexReplaceAttrs,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n\n  if (x.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  const $x = backend.readSync(x.dataId) as Uint8Array[];\n\n  const stringInput = backend_util.fromUint8ToStringArray($x);\n  const output = staticRegexReplaceImplCPU(stringInput, 'string',\n                                           attrs as unknown as NamedAttrMap);\n\n  return backend.makeTensorInfo(x.shape, 'string', output);\n}\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'webgl',\n  kernelFunc: staticRegexReplace as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: MathBackendWebGL,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {tensor, indices, updates} = inputs;\n  const {} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n  const flattenTensor =\n      reshape({inputs: {x: tensor}, backend, attrs: {shape: flattenShape}});\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape, false, true);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, flattenTensor], flattenTensor.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: tensor.shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenTensor);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgl',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as unknown as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n"],
  "mappings": "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",
  "names": ["PackingScheme", "TextureUsage", "PhysicalTextureType", "lineNumber", "buffer", "max", "version", "coords", "coordsFromIndexSnippet", "coords", "texNumR", "texNumC", "createVertexShader", "createVertexShader", "buffer", "buffer", "createVertexShader", "ext", "query", "assertNotComplex", "assertNotComplex", "real", "imag", "complex", "zeros", "real", "imag", "real", "zeros", "assertNotComplex", "assertNotComplex", "step", "max", "assertNotComplex", "i", "assertNotComplex", "prod", "assertNotComplex", "slice", "step", "assertNotComplex", "i", "coords", "coords", "newTexture", "LINEAR", "ELU", "RELU", "RELU6", "SIGMOID", "coords", "slice", "subscribers", "buffer", "tmpData", "vals", "CHECK_NAN_SNIPPET", "identity", "identityConfig", "complex", "real", "imag", "identity", "complexConfig", "unaryKernelFunc", "binaryKernelFunc", "real", "imag", "program", "complex", "LINEAR", "RELU", "ELU", "RELU6", "SIGMOID", "multiply", "inputs", "complex", "multiplyConfig", "reshape", "transposeImpl", "transposeImpl", "reshape", "transpose", "transposeImpl", "transposeConfig", "reshape", "transpose", "multiply", "ABS", "abs", "absConfig", "unaryKernelFunc", "unaryKernelFunc", "binaryKernelFunc", "addConfig", "identity", "transpose", "reshape", "transpose", "reshape", "coords", "reshape", "transpose", "transpose", "unaryKernelFunc", "unaryKernelFunc", "unaryKernelFunc", "CHECK_NAN_SNIPPET", "binaryKernelFunc", "unaryKernelFunc", "compareOp", "identity", "coords", "slice", "sliceConfig", "prod", "reshape", "transpose", "slice", "bitwiseAnd", "bitwiseAndConfig", "notEqual", "binaryKernelFunc", "notEqualConfig", "real", "identity", "realConfig", "cast", "identity", "complex", "real", "notEqual", "castConfig", "ceil", "unaryKernelFunc", "ceilConfig", "coords", "shift", "identity", "concatImpl", "real", "result", "complex", "tensors2D", "reshape", "outShape", "program", "identity", "concatImpl", "reshape", "identity", "reshape", "unaryKernelFunc", "unaryKernelFunc", "CumOpType", "reverse", "getCoords", "reverse", "transpose", "identity", "reverse", "reverse", "reshape", "reshape", "transpose", "reshape", "multiply", "ELU", "unaryKernelFunc", "equal", "binaryKernelFunc", "equalConfig", "unaryKernelFunc", "exp", "unaryKernelFunc", "expConfig", "reshape", "expm1", "unaryKernelFunc", "expm1Config", "reshape", "complex", "floor", "unaryKernelFunc", "floorConfig", "floorDiv", "binaryKernelFunc", "floorDivConfig", "inputs", "dataFormat", "reshape", "reshape", "getSourceCoords", "reshape", "greater", "binaryKernelFunc", "greaterConfig", "greaterEqual", "binaryKernelFunc", "greaterEqualConfig", "unaryKernelFunc", "unaryKernelFunc", "unaryKernelFunc", "less", "binaryKernelFunc", "lessConfig", "lessEqual", "binaryKernelFunc", "lessEqualConfig", "log", "unaryKernelFunc", "logConfig", "unaryKernelFunc", "binaryKernelFunc", "unaryKernelFunc", "binaryKernelFunc", "maxImpl", "reshape", "transposeImpl", "maxImpl", "CHECK_NAN_SNIPPET", "maximum", "binaryKernelFunc", "maximumConfig", "identity", "reshape", "transposeImpl", "transpose", "reshape", "CHECK_NAN_SNIPPET", "minimum", "binaryKernelFunc", "minimumConfig", "coords", "binaryKernelFunc", "binaryKernelFunc", "sub", "binaryKernelFunc", "subConfig", "reshape", "sub", "exp", "neg", "negConfig", "reshape", "real", "complex", "real", "complex", "coords", "binaryKernelFunc", "prod", "transpose", "reshape", "prodConfig", "step", "unaryKernelFunc", "RELU", "unaryKernelFunc", "RELU6", "unaryKernelFunc", "channels", "identity", "unaryKernelFunc", "rsqrt", "unaryKernelFunc", "rsqrtConfig", "reshape", "select", "unaryKernelFunc", "SIGMOID", "sigmoid", "unaryKernelFunc", "sigmoidConfig", "unaryKernelFunc", "unaryKernelFunc", "unaryKernelFunc", "unaryKernelFunc", "prod", "reshape", "transpose", "reshape", "slice", "sqrt", "unaryKernelFunc", "sqrtConfig", "unaryKernelFunc", "squaredDifference", "binaryKernelFunc", "squaredDifferenceConfig", "staticRegexReplace", "staticRegexReplaceConfig", "reshape", "slice", "unaryKernelFunc", "unaryKernelFunc", "reshape", "getSourceCoords", "reshape", "inputs", "prevIndices", "slice", "slice", "reshape", "transpose", "reshape", "x", "segmentIds", "numSegments", "inSize", "result", "absConfig", "addConfig", "bitwiseAndConfig", "castConfig", "ceilConfig", "complexConfig", "equalConfig", "expConfig", "expm1Config", "floorConfig", "floorDivConfig", "greaterConfig", "greaterEqualConfig", "identityConfig", "lessConfig", "lessEqualConfig", "logConfig", "maximumConfig", "minimumConfig", "multiplyConfig", "negConfig", "notEqualConfig", "prodConfig", "realConfig", "rsqrtConfig", "sigmoidConfig", "sliceConfig", "sqrtConfig", "squaredDifferenceConfig", "staticRegexReplaceConfig", "subConfig", "transposeConfig"]
}
